#!/usr/bin/env ruby
require 'uri'
require 'text-table'

SCRIPTS="#{ENV['HOME']}/.pharo/setup"

class JenkinsProject
  attr_reader :name
  
  def initialize name, artifact=name, files=[:zip]
    @name, @artifact, @files = name, artifact, {}
    files = [files] if files.is_a? Symbol
    files.each do |type, filename|
      @files[type] = filename || artifact
    end
  end
  
  def job_url
    "https://ci.lille.inria.fr/pharo/job/#{URI.escape @name}"
  end
  
  def files_for_url
    all = @files.collect do |type, filename|
      case type
      when :zip
        URI.escape(filename) + '.zip'
      when :image
        "#{URI.escape @artifact}/#{URI.escape(filename)}.{image,changes}'"
      end
    end
  end
  
  def setup_scripts
    [SCRIPTS, File.join(SCRIPTS, @artifact)].collect{ |f|
      "#{f}.st"
    }.select{ |f|
      File.exists? f
    }
  end

  def download_urls
    files_for_url.collect do |each|
      "#{job_url}/lastSuccessfulBuild/artifact/#{each}"
    end
  end
  
  def check_overwrite
    raise 'Image already exists' if File.exists?("#{Dir.pwd}/#{@final_name}")
  end
  
  def fetch
    download_urls.each do |url|
      progress "Fetching: #{url}"
      system 'curl',
        '--remote-name', # same file name
        '--insecure', # SSL is a hassle
        '--continue-at', '-', # reuse already-downloaded file
        '--fail',
        '--progress-bar',
        url
      raise "Download failed: #{url}" unless $?.success?
    end
  end
  
  def expand
    @files.each do |type, filename|
      if type == :zip
        progress "Unzipping:"
        system 'unzip', filename,
          "#{@artifact}/#{@artifact}.image",
          "#{@artifact}/#{@artifact}.changes"
        File.delete "#{filename}.zip"
      end
    end
  end
  
  def rename
    unless @final_name == @artifact
      progress "Renaming: #{@artifact} => #{@final_name}"
      File.rename "#{@artifact}/#{@artifact}.image",   "#{@artifact}/#{@final_name}.image"
      File.rename "#{@artifact}/#{@artifact}.changes", "#{@artifact}/#{@final_name}.changes"
      File.rename @artifact, @final_name
    end
  end
  
  def setup
    if File.directory? 'package-cache'
      File.symlink '../package-cache', "#{@final_name}/package-cache"
    end
    setup_scripts.each do |script|
      progress "Initializing: #{File.basename(script)}"
      system 'pharo', '-headless', "#{ENV['PWD']}/#{@final_name}/#{@final_name}.image", script
    end
  end
  
  def download(as_name = nil)
    @final_name = as_name || @artifact
    check_overwrite
    fetch
    expand
    rename
    setup
  end
end


USAGE_TEXT = <<-EOS
#{File.basename $PROGRAM_NAME} [project] [name]
Downloads latest successful build of project from Hudson and optionally renames it.

Known projects:
EOS

def usage
  $stderr.puts USAGE_TEXT
  table = Text::Table.new do |t|
    t.vertical_boundary = t.horizontal_boundary = t.boundary_intersection = ''
    t.horizontal_padding = 1
    PROJECTS.each do |k,p|  t.rows << [k, p.name, p.job_url]  end
  end
  $stderr.puts table
  exit
end

def progress(msg)
  puts msg
end


if __FILE__ == $PROGRAM_NAME

  PROJECTS = {
    'pharo'    => JenkinsProject.new("Pharo 1.4", "Pharo-1.4"),
    '1.4'      => JenkinsProject.new("Pharo 1.4", "Pharo-1.4"),
    '1.3'      => JenkinsProject.new("Pharo 1.3", "Pharo-1.3"),
    'coral'    => JenkinsProject.new("Coral"),
    'citezen'  => JenkinsProject.new("Citezen"),
    'nautilus' => JenkinsProject.new("Nautilus", "Nautilus1.4")
  }
  PROJECTS.default = PROJECTS['pharo']
  
  usage if /-(h|-?help)/ =~ ARGV.first
  PROJECTS[ARGV[0]].download(ARGV[1])
end

# vim:sw=2:sts=2:ts=2:

