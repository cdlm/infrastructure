#!/usr/bin/env ruby
# rubocop:disable Style/FileName, Style/SingleLineMethods, Style/TrivialAccessors
#
# TODO: document with the literate-code-webpage thing (rocco)
require 'English'

# An update wraps a shell command, storing options about whether and
# how to run it.
#
# @abstract Subclasses specify how to {Update#run} the actual update.
class Update
  OPTION_DEFAULTS = {
    dry_run: false,
    guard: ['true'],
    sudo: false,
    nice: false,
    directory: '~'
  }

  def initialize(options = {})
    @options = OPTION_DEFAULTS.merge(options)
  end

  def nice?()  @options[:nice]  end
  def sudo?()  @options[:sudo]  end
  def dry_run?()  @options[:dry_run]  end
  def skip?()  dry_run? || !guard_ok? end

  def guard_ok?
    Dir.chdir(File.expand_path(@options[:directory])) do
      system(*@options[:guard])
    end
  end

  def describe(indent)
    desc = @options[:description]
    skipped = skip?  ?  ' (skipped)'  :  ''
    $stderr.puts "#{'  ' * indent}#{desc}#{skipped}" unless desc.nil?
  end
end

# A single-command update, running under `nice`, `sudo`, or in a
# precise directory, as specified.
# Fails gracefully if the required command is not available.
# Succeeds if the shell command succeeds.
class SingleUpdate < Update
  def initialize(words, options = {})
    super options
    @words = words
    @result = false
    @options[:description] ||= @words.join ' '
    @command_available = system("which #{@words.first} > /dev/null 2>&1")
  end

  def skip?()  super || !@command_available || ARGV.include?("--no-#{name}")  end

  def command
    (sudo? ? ['sudo'] : []) + (nice? ? ['nice'] : []) + @words
  end

  def name()  @words.first  end

  def run(indent = 0)
    describe indent
    Dir.chdir(File.expand_path(@options[:directory])) do
      system(*command)
    end unless skip?
    @result = skip? || $CHILD_STATUS.success?
  end

  def success?()  @result  end
end

# A group made of independent updates. Provides a small DSL to compose
# children updates.  Attempts to run all children, propagating options
# down to them, but succeeds only if all children succeeded.
class Updates < Update
  def initialize(options = {})
    super options
    @things = []
    @results = []
    yield self
  end

  # Entry point of the update DSL. Initiates and runs the root update
  # group, then report on success.
  #
  # @api public
  def self.run(*args, &block)
    all_the_things = new(*args, &block)
    success = all_the_things.run
    all_the_things.notify success
    exit success ? 0 : 1
  end

  # Define a sub-group of updates.
  #
  # @api public
  def group(options = {}, &block)
    @things << Updates.new(@options.merge(options), &block)
  end

  # Define a sub-sequence of updates.
  #
  # @api public
  def seq(options = {}, &block)
    @things << DependentUpdates.new(@options.merge(options), &block)
  end

  # Define a single child update.
  #
  # @api public
  def step(words, options = {})
    @things << SingleUpdate.new(words, @options.merge(options))
  end

  def sub_indent
    @options.key?(:description) ? 1 : 0
  end

  def run(indent = 0)
    describe indent
    @results = @things.map { |t| t.run(indent + sub_indent) }
    success?
  end

  def success?()  @results.all?  end

  # Notifies success or failure to the user.
  def notify(success)
    message = if success
                "Successfully upgraded all the things! (#{Time.now.strftime("%H:%M, %-d %b")})"
              else
                'Failed to upgrade all the things :('
              end
    osx_notify message
    success && $stderr.tty? && lol_notify(message) || $stderr.puts(message)
  end

  def osx_notify(message)
    require 'terminal-notifier'
    if ::TerminalNotifier.available?
      ::TerminalNotifier.remove :update_all_the_things
      ::TerminalNotifier.notify message,
                                title: 'Tools upgrade',
                                subtitle: 'Now get back to actual work',
                                group: :update_all_the_things
    end
  rescue LoadError
    self
  end

  def lol_notify(message)
    old_stdout = $stdout
    require('lolcat')
    $stdout = $stderr
    Lol.println message,
                os: rand(256),
                spread: 3.0,
                freq: 0.25
    true
  rescue LoadError
    false
  ensure
    $stdout = old_stdout
  end
end

# A sequence of interdependent updates. Runs children in order and
# fails as soon as one of them fails.
class DependentUpdates < Updates
  def run(indent = 0)
    describe indent
    @things.each do |t|
      @results << t.run(indent + sub_indent)
      break unless t.success?
    end
    success?
  end
end

# My actual list of update steps (to be run several times a day).
Updates.run nice: true do |g|
  g.seq do |vim|
    # vim.step %w(vim +BundleUpdate +qa)
    vim.step %w(vim +PlugUpgrade +qa)
    vim.step %w(vim +PlugUpdate  +qa)
  end

  g.seq directory: '~/.emacs.d', guard: %w(test -f Cask) do |cask|
    cask.step %w(cask upgrade)
    cask.step %w(cask update)
  end

  g.step %w(tlmgr update --self --all)

  g.step %w(gem update)

  g.seq do |brew|
    brew.step %w(brew update)
    brew.step %w(brew upgrade --all)
    brew.step %w(brew cleanup)
  end

  g.step %w(rustup update)

  g.step %w(cabal update)

  g.seq do |opam|
    opam.step %w(opam update)
    opam.step %w(opam upgrade --yes)
  end
end
