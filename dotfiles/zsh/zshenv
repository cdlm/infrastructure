# -*- mode: sh -*-
typeset -U path fpath manpath
export -TU INFOPATH infopath
export -TU CLASSPATH classpath

path=(/usr/local/bin $path)
manpath=('') # empty element falls back to system path

# locate / test for presence of a command
# dereference symlinks to help find homebrew packages
function find_command() {
    local found
    found=`builtin which -ps $*` || return 1
    echo ${found##* -> }
}
function has_command() { find_command $* >/dev/null 2>&1; }

# homebrew
local bp='/opt/homebrew' #`brew --prefix`
if [ -d $bp ]; then
   path=(
      $bp/sbin
      $bp/bin
      $path)
   manpath+="$bp/share/man"
fi

# byobu screen/tmux wrapper
has_command byobu && export BYOBU_PREFIX="$bp"

# standalone texlive, selected from ~/.texliveVersion
function texlive_set_paths() {
    local texliveVersion texlivePrefix texliveBin
    texliveVersion=${1:-$(< ~/.texliveVersion)} 2>/dev/null
    for dir in {/opt,/usr/local}/texlive; do
        if [ -d "$dir" ]; then
            texlivePrefix="${dir}/${texliveVersion:-2013}"
            break
        fi
    done
    [ -d "$texlivePrefix" ] || return
    texliveBin="${texlivePrefix}/bin/x86_64-darwin"
    [ -d "$texliveBin" ] || texliveBin="${texlivePrefix}/bin/universal-darwin"
    [ -d "$texliveBin" ] || return

    path+="$texliveBin"
    infopath+="$texlivePrefix/texmf-dist/doc/info"
    manpath+="$texlivePrefix/texmf-dist/doc/man"
}
texlive_set_paths

# haskell cabal
local hs="$HOME/.cabal"
if [ -d $hs ]; then
    path=($hs/bin $path)
    manpath+="$hs/share/man"
fi
unset hs

# Ocaml, fully installed via opam
if has_command opam && [ -f "$HOME/.opam/opam-init/init.zsh" ]; then
    . "$HOME/.opam/opam-init/init.zsh"
fi

# Language runtime managers
has_command rbenv && eval "$(rbenv init -)"
has_command pyenv && eval "$(pyenv init -)"
has_command jenv && eval "$(jenv init -)"

# user-specific tools
path=($HOME/bin $path)
