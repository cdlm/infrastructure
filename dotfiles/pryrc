# -*- ruby -*-
# http://stackoverflow.com/questions/7798795/how-to-adjust-pry-colors

# pry-debugger commands
if defined?(PryDebugger) || defined?(PryNav)
  Pry.commands.alias_command 's', 'step'
  Pry.commands.alias_command 'n', 'next'
  Pry.commands.alias_command 'f', 'finish'
  Pry.commands.alias_command 'c', 'continue'
  Pry.commands.alias_command 'i', 'step' # into
  Pry.commands.alias_command 'o', 'next' # over
  Pry.commands.alias_command 'u', 'finish' # up to caller
  Pry.commands.alias_command 'p', 'continue' # proceed
end

begin # rescue load errors, because requiring gems will fail in bundled projects

  # taken from https://github.com/joelturnbull/pry-define-it/blob/master/.pryrc
  # related to https://github.com/pry/pry-fix
require 'active_support/inflector'

Pry::Commands.create_command 'define-it',
  'Commands for code generation reported during a Pry session for use in TDD' do

  def process
    last_exception = context[:pry_instance].last_exception

    case last_exception
    when NameError then define_missing_class last_exception
    when NoMethodError then define_missing_method last_exception
    end
  end

  def define_missing_class(last_exception)
    klass = last_exception.name.to_s
    code  = "class #{klass}\n\nend"
    file  = "#{klass.underscore}.rb"

    File.open(file, 'w') { |f| f.write(code) }
    silence_warnings do
      TOPLEVEL_BINDING.eval(File.read(file), file)
    end
    throw :try_again
  end

  def define_missing_method(last_exception)
    klass  = last_exception.message.match(/<(.*):/)[1]
    method = last_exception.name.to_s
    args   = last_exception.args.each_with_index.map do |arg, i|
      "#{arg.class.to_s.downcase}#{i}"
    end
    file = Pry::CodeObject.lookup(klass, _pry_).source_file
    file = `ack #{klass} *.rb`.split(':')[0] unless file

    lines = File.readlines(file).size + 1
    code  = File.read(file).gsub(/^end/mi) do |match|
      <<-CODE
  def #{method}(#{args.join(',')})
    # TODO
  end

#{match}
      CODE
    end

    File.open(file, 'w') { |f| f.write(code) }
    run "edit -r -l #{lines} #{file}"
  end
end

rescue LoadError
end
# vim: ft=ruby
